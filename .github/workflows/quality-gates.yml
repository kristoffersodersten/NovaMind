name: NovaMind Quality Gates

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  swift-quality-check:
    name: Swift Code Quality
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install SwiftLint
      run: |
        if ! command -v swiftlint &> /dev/null; then
          brew install swiftlint
        fi
        
    - name: Create SwiftLint Config
      run: |
        cat > .swiftlint.yml << EOF
        disabled_rules:
          - line_length # We'll handle this manually for decomposition
        opt_in_rules:
          - empty_count
          - force_unwrapping
          - implicitly_unwrapped_optional
        excluded:
          - Carthage
          - Pods
          - .build
        analyzer_rules:
          - explicit_self
        line_length: 120
        type_body_length: 350  # Apple's recommendation
        file_length: 400       # Apple's recommendation  
        function_body_length: 50
        EOF
        
    - name: Run SwiftLint
      run: swiftlint lint --reporter github-actions-logging
      
    - name: Check File Sizes (Apple Standards)
      run: |
        echo "üîç Checking for files exceeding Apple's coding standards..."
        echo "üìè Recommended limits: Files ‚â§400 lines, Types ‚â§350 lines, Functions ‚â§50 lines"
        echo ""
        
        large_files=0
        while IFS= read -r file; do
          if [[ -f "$file" ]]; then
            lines=$(wc -l < "$file")
            if [[ $lines -gt 400 ]]; then
              echo "‚ö†Ô∏è  $file: $lines lines (exceeds 400-line recommendation)"
              large_files=$((large_files + 1))
            fi
          fi
        done < <(find . -name "*.swift" -not -path "./.build/*" -not -path "./Carthage/*" -not -path "./Pods/*")
        
        if [[ $large_files -gt 0 ]]; then
          echo ""
          echo "üí° Consider decomposing large files for better maintainability"
          echo "üìö Apple's Swift API Design Guidelines recommend keeping files focused and concise"
        else
          echo "‚úÖ All Swift files comply with Apple's size recommendations!"
        fi

  architecture-validation:
    name: Architecture Validation
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Validate NovaMind Architecture
      run: |
        echo "üèóÔ∏è Validating NovaMind architecture compliance..."
        
        # Check for modular decomposition
        echo "üì¶ Checking modular structure..."
        
        # Enhanced Memory Architecture
        if [[ -d "NovaMind/Services/EnhancedMemory" ]]; then
          echo "‚úÖ Enhanced Memory: Properly modularized"
          ls -la NovaMind/Services/EnhancedMemory/ | grep -E "\.swift$" | wc -l | xargs echo "   Components:"
        else
          echo "‚ö†Ô∏è  Enhanced Memory: Single file detected"
        fi
        
        # Bird Agent System
        if [[ -d "NovaMind/Services/BirdAgent" ]]; then
          echo "‚úÖ Bird Agent: Properly modularized"
        else
          echo "‚ö†Ô∏è  Bird Agent: Check modularization"
        fi
        
        # Resonance Radar
        if [[ -d "NovaMind/Services/ResonanceRadar" ]]; then
          echo "‚úÖ Resonance Radar: Properly modularized"
        else
          echo "‚ö†Ô∏è  Resonance Radar: Check modularization"
        fi
        
        # NeuroMesh
        if [[ -d "NovaMind/NeuroMesh" ]]; then
          echo "‚úÖ NeuroMesh: Properly structured"
        else
          echo "‚ö†Ô∏è  NeuroMesh: Check structure"
        fi

  dependency-security:
    name: Dependency Security
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Swift Package Security Audit
      run: |
        echo "üîí Running security audit on Swift packages..."
        
        if [[ -f "Package.swift" ]]; then
          swift package show-dependencies --format json > dependencies.json
          echo "‚úÖ Dependencies mapped"
          
          # Check for common security issues
          echo "üîç Checking for potential security issues..."
          
          # Look for HTTP URLs (should be HTTPS)
          if grep -r "http://" Package.swift 2>/dev/null; then
            echo "‚ö†Ô∏è  HTTP URLs found - consider using HTTPS"
          else
            echo "‚úÖ No HTTP URLs detected"
          fi
          
          # Check for hardcoded secrets patterns
          if grep -r -i "password\|secret\|key\|token" --include="*.swift" . | grep -v "// " | grep -v "//" | head -5; then
            echo "‚ö†Ô∏è  Potential hardcoded secrets detected - review carefully"
          else
            echo "‚úÖ No obvious hardcoded secrets found"
          fi
        else
          echo "‚ÑπÔ∏è  No Package.swift found"
        fi

  performance-guidelines:
    name: Performance Guidelines
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Check Performance Patterns
      run: |
        echo "‚ö° Analyzing performance patterns..."
        
        # Check for common performance anti-patterns
        echo "üîç Checking for performance considerations..."
        
        # Force unwrapping in performance-critical code
        force_unwrap_count=$(grep -r "!" --include="*.swift" . | grep -v "// " | wc -l)
        echo "Force unwrapping occurrences: $force_unwrap_count"
        
        # Nested loops (potential performance issues)
        nested_loops=$(grep -r -A 5 "for.*in" --include="*.swift" . | grep -c "for.*in")
        echo "Nested loop patterns: $nested_loops"
        
        # Async/await usage (good for performance)
        async_count=$(grep -r "async\|await" --include="*.swift" . | wc -l)
        echo "‚úÖ Async/await usage: $async_count occurrences"
        
        echo ""
        echo "üí° Performance optimization suggestions:"
        echo "   ‚Ä¢ Prefer async/await for concurrent operations"
        echo "   ‚Ä¢ Use lazy loading for expensive computations"
        echo "   ‚Ä¢ Consider caching for frequently accessed data"

  novamind-integration:
    name: NovaMind Integration Check
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Validate NovaMind Components
      run: |
        echo "üß† Validating NovaMind component integration..."
        
        # Check for key NovaMind components
        components=(
          "CICDPipelineExecutor"
          "EnhancedMemoryArchitecture" 
          "NeuroMeshEmotionalModel"
          "Semantic360ResonanceRadar"
          "BirdAgentOrchestrator"
          "ResonanceRadarSystem"
          "CoralEngine"
          "EcosystemValidator"
        )
        
        for component in "${components[@]}"; do
          if find . -name "*.swift" -exec grep -l "$component" {} \; | head -1 > /dev/null; then
            echo "‚úÖ $component: Found and integrated"
          else
            echo "‚ö†Ô∏è  $component: Not found or needs integration"
          fi
        done
        
        echo ""
        echo "üéØ Integration status checked for all major NovaMind components"

  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [swift-quality-check, architecture-validation, dependency-security, performance-guidelines, novamind-integration]
    if: always()
    
    steps:
    - name: Quality Gate Results
      run: |
        echo "üéØ NovaMind Quality Gate Summary"
        echo "==============================="
        echo ""
        
        # Check job results
        swift_quality="${{ needs.swift-quality-check.result }}"
        architecture="${{ needs.architecture-validation.result }}"
        security="${{ needs.dependency-security.result }}"
        performance="${{ needs.performance-guidelines.result }}"
        integration="${{ needs.novamind-integration.result }}"
        
        total_checks=5
        passed_checks=0
        
        if [[ "$swift_quality" == "success" ]]; then
          echo "‚úÖ Swift Code Quality: PASSED"
          passed_checks=$((passed_checks + 1))
        else
          echo "‚ùå Swift Code Quality: FAILED"
        fi
        
        if [[ "$architecture" == "success" ]]; then
          echo "‚úÖ Architecture Validation: PASSED"
          passed_checks=$((passed_checks + 1))
        else
          echo "‚ùå Architecture Validation: FAILED"
        fi
        
        if [[ "$security" == "success" ]]; then
          echo "‚úÖ Security Check: PASSED"
          passed_checks=$((passed_checks + 1))
        else
          echo "‚ùå Security Check: FAILED"
        fi
        
        if [[ "$performance" == "success" ]]; then
          echo "‚úÖ Performance Guidelines: PASSED"  
          passed_checks=$((passed_checks + 1))
        else
          echo "‚ùå Performance Guidelines: FAILED"
        fi
        
        if [[ "$integration" == "success" ]]; then
          echo "‚úÖ NovaMind Integration: PASSED"
          passed_checks=$((passed_checks + 1))
        else
          echo "‚ùå NovaMind Integration: FAILED"
        fi
        
        echo ""
        echo "üìä Quality Score: $passed_checks/$total_checks"
        
        if [[ $passed_checks -eq $total_checks ]]; then
          echo "üéâ All quality gates PASSED! Ready for deployment."
          exit 0
        elif [[ $passed_checks -ge 3 ]]; then
          echo "‚ö†Ô∏è  Quality gates partially passed. Review issues before deployment."
          exit 0
        else
          echo "‚ùå Quality gates FAILED. Address critical issues before proceeding."
          exit 1
        fi
